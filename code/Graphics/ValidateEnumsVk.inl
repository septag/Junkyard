#pragma once

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Validate maching enums between Vk and Gfx
static_assert(GfxFormat::Undefined == static_cast<GfxFormat>(VK_FORMAT_UNDEFINED));
static_assert(GfxFormat::R4G4_UNORM_PACK8 == static_cast<GfxFormat>(VK_FORMAT_R4G4_UNORM_PACK8));
static_assert(GfxFormat::R4G4B4A4_UNORM_PACK16 == static_cast<GfxFormat>(VK_FORMAT_R4G4B4A4_UNORM_PACK16));
static_assert(GfxFormat::B4G4R4A4_UNORM_PACK16 == static_cast<GfxFormat>(VK_FORMAT_B4G4R4A4_UNORM_PACK16));
static_assert(GfxFormat::R5G6B5_UNORM_PACK16 == static_cast<GfxFormat>(VK_FORMAT_R5G6B5_UNORM_PACK16));
static_assert(GfxFormat::B5G6R5_UNORM_PACK16 == static_cast<GfxFormat>(VK_FORMAT_B5G6R5_UNORM_PACK16));
static_assert(GfxFormat::R5G5B5A1_UNORM_PACK16 == static_cast<GfxFormat>(VK_FORMAT_R5G5B5A1_UNORM_PACK16));
static_assert(GfxFormat::B5G5R5A1_UNORM_PACK16 == static_cast<GfxFormat>(VK_FORMAT_B5G5R5A1_UNORM_PACK16));
static_assert(GfxFormat::A1R5G5B5_UNORM_PACK16 == static_cast<GfxFormat>(VK_FORMAT_A1R5G5B5_UNORM_PACK16));
static_assert(GfxFormat::R8_UNORM == static_cast<GfxFormat>(VK_FORMAT_R8_UNORM));
static_assert(GfxFormat::R8_SNORM == static_cast<GfxFormat>(VK_FORMAT_R8_SNORM));
static_assert(GfxFormat::R8_USCALED == static_cast<GfxFormat>(VK_FORMAT_R8_USCALED));
static_assert(GfxFormat::R8_SSCALED == static_cast<GfxFormat>(VK_FORMAT_R8_SSCALED));
static_assert(GfxFormat::R8_UINT == static_cast<GfxFormat>(VK_FORMAT_R8_UINT));
static_assert(GfxFormat::R8_SINT == static_cast<GfxFormat>(VK_FORMAT_R8_SINT));
static_assert(GfxFormat::R8_SRGB == static_cast<GfxFormat>(VK_FORMAT_R8_SRGB));
static_assert(GfxFormat::R8G8_UNORM == static_cast<GfxFormat>(VK_FORMAT_R8G8_UNORM));
static_assert(GfxFormat::R8G8_SNORM == static_cast<GfxFormat>(VK_FORMAT_R8G8_SNORM));
static_assert(GfxFormat::R8G8_USCALED == static_cast<GfxFormat>(VK_FORMAT_R8G8_USCALED));
static_assert(GfxFormat::R8G8_SSCALED == static_cast<GfxFormat>(VK_FORMAT_R8G8_SSCALED));
static_assert(GfxFormat::R8G8_UINT == static_cast<GfxFormat>(VK_FORMAT_R8G8_UINT));
static_assert(GfxFormat::R8G8_SINT == static_cast<GfxFormat>(VK_FORMAT_R8G8_SINT));
static_assert(GfxFormat::R8G8_SRGB == static_cast<GfxFormat>(VK_FORMAT_R8G8_SRGB));
static_assert(GfxFormat::R8G8B8_UNORM == static_cast<GfxFormat>(VK_FORMAT_R8G8B8_UNORM));
static_assert(GfxFormat::R8G8B8_SNORM == static_cast<GfxFormat>(VK_FORMAT_R8G8B8_SNORM));
static_assert(GfxFormat::R8G8B8_USCALED == static_cast<GfxFormat>(VK_FORMAT_R8G8B8_USCALED));
static_assert(GfxFormat::R8G8B8_SSCALED == static_cast<GfxFormat>(VK_FORMAT_R8G8B8_SSCALED));
static_assert(GfxFormat::R8G8B8_UINT == static_cast<GfxFormat>(VK_FORMAT_R8G8B8_UINT));
static_assert(GfxFormat::R8G8B8_SINT == static_cast<GfxFormat>(VK_FORMAT_R8G8B8_SINT));
static_assert(GfxFormat::R8G8B8_SRGB == static_cast<GfxFormat>(VK_FORMAT_R8G8B8_SRGB));
static_assert(GfxFormat::B8G8R8_UNORM == static_cast<GfxFormat>(VK_FORMAT_B8G8R8_UNORM));
static_assert(GfxFormat::B8G8R8_SNORM == static_cast<GfxFormat>(VK_FORMAT_B8G8R8_SNORM));
static_assert(GfxFormat::B8G8R8_USCALED == static_cast<GfxFormat>(VK_FORMAT_B8G8R8_USCALED));
static_assert(GfxFormat::B8G8R8_SSCALED == static_cast<GfxFormat>(VK_FORMAT_B8G8R8_SSCALED));
static_assert(GfxFormat::B8G8R8_UINT == static_cast<GfxFormat>(VK_FORMAT_B8G8R8_UINT));
static_assert(GfxFormat::B8G8R8_SINT == static_cast<GfxFormat>(VK_FORMAT_B8G8R8_SINT));
static_assert(GfxFormat::B8G8R8_SRGB == static_cast<GfxFormat>(VK_FORMAT_B8G8R8_SRGB));
static_assert(GfxFormat::R8G8B8A8_UNORM == static_cast<GfxFormat>(VK_FORMAT_R8G8B8A8_UNORM));
static_assert(GfxFormat::R8G8B8A8_SNORM == static_cast<GfxFormat>(VK_FORMAT_R8G8B8A8_SNORM));
static_assert(GfxFormat::R8G8B8A8_USCALED == static_cast<GfxFormat>(VK_FORMAT_R8G8B8A8_USCALED));
static_assert(GfxFormat::R8G8B8A8_SSCALED == static_cast<GfxFormat>(VK_FORMAT_R8G8B8A8_SSCALED));
static_assert(GfxFormat::R8G8B8A8_UINT == static_cast<GfxFormat>(VK_FORMAT_R8G8B8A8_UINT));
static_assert(GfxFormat::R8G8B8A8_SINT == static_cast<GfxFormat>(VK_FORMAT_R8G8B8A8_SINT));
static_assert(GfxFormat::R8G8B8A8_SRGB == static_cast<GfxFormat>(VK_FORMAT_R8G8B8A8_SRGB));
static_assert(GfxFormat::B8G8R8A8_UNORM == static_cast<GfxFormat>(VK_FORMAT_B8G8R8A8_UNORM));
static_assert(GfxFormat::B8G8R8A8_SNORM == static_cast<GfxFormat>(VK_FORMAT_B8G8R8A8_SNORM));
static_assert(GfxFormat::B8G8R8A8_USCALED == static_cast<GfxFormat>(VK_FORMAT_B8G8R8A8_USCALED));
static_assert(GfxFormat::B8G8R8A8_SSCALED == static_cast<GfxFormat>(VK_FORMAT_B8G8R8A8_SSCALED));
static_assert(GfxFormat::B8G8R8A8_UINT == static_cast<GfxFormat>(VK_FORMAT_B8G8R8A8_UINT));
static_assert(GfxFormat::B8G8R8A8_SINT == static_cast<GfxFormat>(VK_FORMAT_B8G8R8A8_SINT));
static_assert(GfxFormat::B8G8R8A8_SRGB == static_cast<GfxFormat>(VK_FORMAT_B8G8R8A8_SRGB));
static_assert(GfxFormat::A8B8G8R8_UNORM_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A8B8G8R8_UNORM_PACK32));
static_assert(GfxFormat::A8B8G8R8_SNORM_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A8B8G8R8_SNORM_PACK32));
static_assert(GfxFormat::A8B8G8R8_USCALED_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A8B8G8R8_USCALED_PACK32));
static_assert(GfxFormat::A8B8G8R8_SSCALED_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A8B8G8R8_SSCALED_PACK32));
static_assert(GfxFormat::A8B8G8R8_UINT_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A8B8G8R8_UINT_PACK32));
static_assert(GfxFormat::A8B8G8R8_SINT_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A8B8G8R8_SINT_PACK32));
static_assert(GfxFormat::A8B8G8R8_SRGB_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A8B8G8R8_SRGB_PACK32));
static_assert(GfxFormat::A2R10G10B10_UNORM_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A2R10G10B10_UNORM_PACK32));
static_assert(GfxFormat::A2R10G10B10_SNORM_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A2R10G10B10_SNORM_PACK32));
static_assert(GfxFormat::A2R10G10B10_USCALED_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A2R10G10B10_USCALED_PACK32));
static_assert(GfxFormat::A2R10G10B10_SSCALED_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A2R10G10B10_SSCALED_PACK32));
static_assert(GfxFormat::A2R10G10B10_UINT_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A2R10G10B10_UINT_PACK32));
static_assert(GfxFormat::A2R10G10B10_SINT_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A2R10G10B10_SINT_PACK32));
static_assert(GfxFormat::A2B10G10R10_UNORM_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A2B10G10R10_UNORM_PACK32));
static_assert(GfxFormat::A2B10G10R10_SNORM_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A2B10G10R10_SNORM_PACK32));
static_assert(GfxFormat::A2B10G10R10_USCALED_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A2B10G10R10_USCALED_PACK32));
static_assert(GfxFormat::A2B10G10R10_SSCALED_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A2B10G10R10_SSCALED_PACK32));
static_assert(GfxFormat::A2B10G10R10_UINT_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A2B10G10R10_UINT_PACK32));
static_assert(GfxFormat::A2B10G10R10_SINT_PACK32 == static_cast<GfxFormat>(VK_FORMAT_A2B10G10R10_SINT_PACK32));
static_assert(GfxFormat::R16_UNORM == static_cast<GfxFormat>(VK_FORMAT_R16_UNORM));
static_assert(GfxFormat::R16_SNORM == static_cast<GfxFormat>(VK_FORMAT_R16_SNORM));
static_assert(GfxFormat::R16_USCALED == static_cast<GfxFormat>(VK_FORMAT_R16_USCALED));
static_assert(GfxFormat::R16_SSCALED == static_cast<GfxFormat>(VK_FORMAT_R16_SSCALED));
static_assert(GfxFormat::R16_UINT == static_cast<GfxFormat>(VK_FORMAT_R16_UINT));
static_assert(GfxFormat::R16_SINT == static_cast<GfxFormat>(VK_FORMAT_R16_SINT));
static_assert(GfxFormat::R16_SFLOAT == static_cast<GfxFormat>(VK_FORMAT_R16_SFLOAT));
static_assert(GfxFormat::R16G16_UNORM == static_cast<GfxFormat>(VK_FORMAT_R16G16_UNORM));
static_assert(GfxFormat::R16G16_SNORM == static_cast<GfxFormat>(VK_FORMAT_R16G16_SNORM));
static_assert(GfxFormat::R16G16_USCALED == static_cast<GfxFormat>(VK_FORMAT_R16G16_USCALED));
static_assert(GfxFormat::R16G16_SSCALED == static_cast<GfxFormat>(VK_FORMAT_R16G16_SSCALED));
static_assert(GfxFormat::R16G16_UINT == static_cast<GfxFormat>(VK_FORMAT_R16G16_UINT));
static_assert(GfxFormat::R16G16_SINT == static_cast<GfxFormat>(VK_FORMAT_R16G16_SINT));
static_assert(GfxFormat::R16G16_SFLOAT == static_cast<GfxFormat>(VK_FORMAT_R16G16_SFLOAT));
static_assert(GfxFormat::R16G16B16_UNORM == static_cast<GfxFormat>(VK_FORMAT_R16G16B16_UNORM));
static_assert(GfxFormat::R16G16B16_SNORM == static_cast<GfxFormat>(VK_FORMAT_R16G16B16_SNORM));
static_assert(GfxFormat::R16G16B16_USCALED == static_cast<GfxFormat>(VK_FORMAT_R16G16B16_USCALED));
static_assert(GfxFormat::R16G16B16_SSCALED == static_cast<GfxFormat>(VK_FORMAT_R16G16B16_SSCALED));
static_assert(GfxFormat::R16G16B16_UINT == static_cast<GfxFormat>(VK_FORMAT_R16G16B16_UINT));
static_assert(GfxFormat::R16G16B16_SINT == static_cast<GfxFormat>(VK_FORMAT_R16G16B16_SINT));
static_assert(GfxFormat::R16G16B16_SFLOAT == static_cast<GfxFormat>(VK_FORMAT_R16G16B16_SFLOAT));
static_assert(GfxFormat::R16G16B16A16_UNORM == static_cast<GfxFormat>(VK_FORMAT_R16G16B16A16_UNORM));
static_assert(GfxFormat::R16G16B16A16_SNORM == static_cast<GfxFormat>(VK_FORMAT_R16G16B16A16_SNORM));
static_assert(GfxFormat::R16G16B16A16_USCALED == static_cast<GfxFormat>(VK_FORMAT_R16G16B16A16_USCALED));
static_assert(GfxFormat::R16G16B16A16_SSCALED == static_cast<GfxFormat>(VK_FORMAT_R16G16B16A16_SSCALED));
static_assert(GfxFormat::R16G16B16A16_UINT == static_cast<GfxFormat>(VK_FORMAT_R16G16B16A16_UINT));
static_assert(GfxFormat::R16G16B16A16_SINT == static_cast<GfxFormat>(VK_FORMAT_R16G16B16A16_SINT));
static_assert(GfxFormat::R16G16B16A16_SFLOAT == static_cast<GfxFormat>(VK_FORMAT_R16G16B16A16_SFLOAT));
static_assert(GfxFormat::R32_UINT == static_cast<GfxFormat>(VK_FORMAT_R32_UINT));
static_assert(GfxFormat::R32_SINT == static_cast<GfxFormat>(VK_FORMAT_R32_SINT));
static_assert(GfxFormat::R32_SFLOAT == static_cast<GfxFormat>(VK_FORMAT_R32_SFLOAT));
static_assert(GfxFormat::R32G32_UINT == static_cast<GfxFormat>(VK_FORMAT_R32G32_UINT));
static_assert(GfxFormat::R32G32_SINT == static_cast<GfxFormat>(VK_FORMAT_R32G32_SINT));
static_assert(GfxFormat::R32G32_SFLOAT == static_cast<GfxFormat>(VK_FORMAT_R32G32_SFLOAT));
static_assert(GfxFormat::R32G32B32_UINT == static_cast<GfxFormat>(VK_FORMAT_R32G32B32_UINT));
static_assert(GfxFormat::R32G32B32_SINT == static_cast<GfxFormat>(VK_FORMAT_R32G32B32_SINT));
static_assert(GfxFormat::R32G32B32_SFLOAT == static_cast<GfxFormat>(VK_FORMAT_R32G32B32_SFLOAT));
static_assert(GfxFormat::R32G32B32A32_UINT == static_cast<GfxFormat>(VK_FORMAT_R32G32B32A32_UINT));
static_assert(GfxFormat::R32G32B32A32_SINT == static_cast<GfxFormat>(VK_FORMAT_R32G32B32A32_SINT));
static_assert(GfxFormat::R32G32B32A32_SFLOAT == static_cast<GfxFormat>(VK_FORMAT_R32G32B32A32_SFLOAT));
static_assert(GfxFormat::R64_UINT == static_cast<GfxFormat>(VK_FORMAT_R64_UINT));
static_assert(GfxFormat::R64_SINT == static_cast<GfxFormat>(VK_FORMAT_R64_SINT));
static_assert(GfxFormat::R64_SFLOAT == static_cast<GfxFormat>(VK_FORMAT_R64_SFLOAT));
static_assert(GfxFormat::R64G64_UINT == static_cast<GfxFormat>(VK_FORMAT_R64G64_UINT));
static_assert(GfxFormat::R64G64_SINT == static_cast<GfxFormat>(VK_FORMAT_R64G64_SINT));
static_assert(GfxFormat::R64G64_SFLOAT == static_cast<GfxFormat>(VK_FORMAT_R64G64_SFLOAT));
static_assert(GfxFormat::R64G64B64_UINT == static_cast<GfxFormat>(VK_FORMAT_R64G64B64_UINT));
static_assert(GfxFormat::R64G64B64_SINT == static_cast<GfxFormat>(VK_FORMAT_R64G64B64_SINT));
static_assert(GfxFormat::R64G64B64_SFLOAT == static_cast<GfxFormat>(VK_FORMAT_R64G64B64_SFLOAT));
static_assert(GfxFormat::R64G64B64A64_UINT == static_cast<GfxFormat>(VK_FORMAT_R64G64B64A64_UINT));
static_assert(GfxFormat::R64G64B64A64_SINT == static_cast<GfxFormat>(VK_FORMAT_R64G64B64A64_SINT));
static_assert(GfxFormat::R64G64B64A64_SFLOAT == static_cast<GfxFormat>(VK_FORMAT_R64G64B64A64_SFLOAT));
static_assert(GfxFormat::B10G11R11_UFLOAT_PACK32 == static_cast<GfxFormat>(VK_FORMAT_B10G11R11_UFLOAT_PACK32));
static_assert(GfxFormat::E5B9G9R9_UFLOAT_PACK32 == static_cast<GfxFormat>(VK_FORMAT_E5B9G9R9_UFLOAT_PACK32));
static_assert(GfxFormat::D16_UNORM == static_cast<GfxFormat>(VK_FORMAT_D16_UNORM));
static_assert(GfxFormat::X8_D24_UNORM_PACK32 == static_cast<GfxFormat>(VK_FORMAT_X8_D24_UNORM_PACK32));
static_assert(GfxFormat::D32_SFLOAT == static_cast<GfxFormat>(VK_FORMAT_D32_SFLOAT));
static_assert(GfxFormat::S8_UINT == static_cast<GfxFormat>(VK_FORMAT_S8_UINT));
static_assert(GfxFormat::D16_UNORM_S8_UINT == static_cast<GfxFormat>(VK_FORMAT_D16_UNORM_S8_UINT));
static_assert(GfxFormat::D24_UNORM_S8_UINT == static_cast<GfxFormat>(VK_FORMAT_D24_UNORM_S8_UINT));
static_assert(GfxFormat::D32_SFLOAT_S8_UINT == static_cast<GfxFormat>(VK_FORMAT_D32_SFLOAT_S8_UINT));
static_assert(GfxFormat::BC1_RGB_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_BC1_RGB_UNORM_BLOCK));
static_assert(GfxFormat::BC1_RGB_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_BC1_RGB_SRGB_BLOCK));
static_assert(GfxFormat::BC1_RGBA_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_BC1_RGBA_UNORM_BLOCK));
static_assert(GfxFormat::BC1_RGBA_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_BC1_RGBA_SRGB_BLOCK));
static_assert(GfxFormat::BC2_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_BC2_UNORM_BLOCK));
static_assert(GfxFormat::BC2_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_BC2_SRGB_BLOCK));
static_assert(GfxFormat::BC3_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_BC3_UNORM_BLOCK));
static_assert(GfxFormat::BC3_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_BC3_SRGB_BLOCK));
static_assert(GfxFormat::BC4_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_BC4_UNORM_BLOCK));
static_assert(GfxFormat::BC4_SNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_BC4_SNORM_BLOCK));
static_assert(GfxFormat::BC5_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_BC5_UNORM_BLOCK));
static_assert(GfxFormat::BC5_SNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_BC5_SNORM_BLOCK));
static_assert(GfxFormat::BC6H_UFLOAT_BLOCK == static_cast<GfxFormat>(VK_FORMAT_BC6H_UFLOAT_BLOCK));
static_assert(GfxFormat::BC6H_SFLOAT_BLOCK == static_cast<GfxFormat>(VK_FORMAT_BC6H_SFLOAT_BLOCK));
static_assert(GfxFormat::BC7_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_BC7_UNORM_BLOCK));
static_assert(GfxFormat::BC7_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_BC7_SRGB_BLOCK));
static_assert(GfxFormat::ETC2_R8G8B8_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK));
static_assert(GfxFormat::ETC2_R8G8B8_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK));
static_assert(GfxFormat::ETC2_R8G8B8A1_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK));
static_assert(GfxFormat::ETC2_R8G8B8A1_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK));
static_assert(GfxFormat::ETC2_R8G8B8A8_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK));
static_assert(GfxFormat::ETC2_R8G8B8A8_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK));
static_assert(GfxFormat::EAC_R11_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_EAC_R11_UNORM_BLOCK));
static_assert(GfxFormat::EAC_R11_SNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_EAC_R11_SNORM_BLOCK));
static_assert(GfxFormat::EAC_R11G11_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_EAC_R11G11_UNORM_BLOCK));
static_assert(GfxFormat::EAC_R11G11_SNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_EAC_R11G11_SNORM_BLOCK));
static_assert(GfxFormat::ASTC_4x4_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_4x4_UNORM_BLOCK));
static_assert(GfxFormat::ASTC_4x4_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_4x4_SRGB_BLOCK));
static_assert(GfxFormat::ASTC_5x4_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_5x4_UNORM_BLOCK));
static_assert(GfxFormat::ASTC_5x4_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_5x4_SRGB_BLOCK));
static_assert(GfxFormat::ASTC_5x5_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_5x5_UNORM_BLOCK));
static_assert(GfxFormat::ASTC_5x5_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_5x5_SRGB_BLOCK));
static_assert(GfxFormat::ASTC_6x5_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_6x5_UNORM_BLOCK));
static_assert(GfxFormat::ASTC_6x5_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_6x5_SRGB_BLOCK));
static_assert(GfxFormat::ASTC_6x6_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_6x6_UNORM_BLOCK));
static_assert(GfxFormat::ASTC_6x6_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_6x6_SRGB_BLOCK));
static_assert(GfxFormat::ASTC_8x5_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_8x5_UNORM_BLOCK));
static_assert(GfxFormat::ASTC_8x5_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_8x5_SRGB_BLOCK));
static_assert(GfxFormat::ASTC_8x6_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_8x6_UNORM_BLOCK));
static_assert(GfxFormat::ASTC_8x6_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_8x6_SRGB_BLOCK));
static_assert(GfxFormat::ASTC_8x8_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_8x8_UNORM_BLOCK));
static_assert(GfxFormat::ASTC_8x8_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_8x8_SRGB_BLOCK));
static_assert(GfxFormat::ASTC_10x5_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_10x5_UNORM_BLOCK));
static_assert(GfxFormat::ASTC_10x5_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_10x5_SRGB_BLOCK));
static_assert(GfxFormat::ASTC_10x6_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_10x6_UNORM_BLOCK));
static_assert(GfxFormat::ASTC_10x6_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_10x6_SRGB_BLOCK));
static_assert(GfxFormat::ASTC_10x8_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_10x8_UNORM_BLOCK));
static_assert(GfxFormat::ASTC_10x8_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_10x8_SRGB_BLOCK));
static_assert(GfxFormat::ASTC_10x10_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_10x10_UNORM_BLOCK));
static_assert(GfxFormat::ASTC_10x10_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_10x10_SRGB_BLOCK));
static_assert(GfxFormat::ASTC_12x10_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_12x10_UNORM_BLOCK));
static_assert(GfxFormat::ASTC_12x10_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_12x10_SRGB_BLOCK));
static_assert(GfxFormat::ASTC_12x12_UNORM_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_12x12_UNORM_BLOCK));
static_assert(GfxFormat::ASTC_12x12_SRGB_BLOCK == static_cast<GfxFormat>(VK_FORMAT_ASTC_12x12_SRGB_BLOCK));
static_assert(GfxFormat::G8B8G8R8_422_UNORM == static_cast<GfxFormat>(VK_FORMAT_G8B8G8R8_422_UNORM));
static_assert(GfxFormat::B8G8R8G8_422_UNORM == static_cast<GfxFormat>(VK_FORMAT_B8G8R8G8_422_UNORM));
static_assert(GfxFormat::G8_B8_R8_3PLANE_420_UNORM == static_cast<GfxFormat>(VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM));
static_assert(GfxFormat::G8_B8R8_2PLANE_420_UNORM == static_cast<GfxFormat>(VK_FORMAT_G8_B8R8_2PLANE_420_UNORM));
static_assert(GfxFormat::G8_B8_R8_3PLANE_422_UNORM == static_cast<GfxFormat>(VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM));
static_assert(GfxFormat::G8_B8R8_2PLANE_422_UNORM == static_cast<GfxFormat>(VK_FORMAT_G8_B8R8_2PLANE_422_UNORM));
static_assert(GfxFormat::G8_B8_R8_3PLANE_444_UNORM == static_cast<GfxFormat>(VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM));
static_assert(GfxFormat::R10X6_UNORM_PACK16 == static_cast<GfxFormat>(VK_FORMAT_R10X6_UNORM_PACK16));
static_assert(GfxFormat::R10X6G10X6_UNORM_2PACK16 == static_cast<GfxFormat>(VK_FORMAT_R10X6G10X6_UNORM_2PACK16));
static_assert(GfxFormat::R10X6G10X6B10X6A10X6_UNORM_4PACK16 == static_cast<GfxFormat>(VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16));
static_assert(GfxFormat::G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 == static_cast<GfxFormat>(VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16));
static_assert(GfxFormat::B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 == static_cast<GfxFormat>(VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16));
static_assert(GfxFormat::G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 == static_cast<GfxFormat>(VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16));
static_assert(GfxFormat::G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 == static_cast<GfxFormat>(VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16));
static_assert(GfxFormat::G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 == static_cast<GfxFormat>(VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16));
static_assert(GfxFormat::G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 == static_cast<GfxFormat>(VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16));
static_assert(GfxFormat::G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 == static_cast<GfxFormat>(VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16));
static_assert(GfxFormat::R12X4_UNORM_PACK16 == static_cast<GfxFormat>(VK_FORMAT_R12X4_UNORM_PACK16));
static_assert(GfxFormat::R12X4G12X4_UNORM_2PACK16 == static_cast<GfxFormat>(VK_FORMAT_R12X4G12X4_UNORM_2PACK16));
static_assert(GfxFormat::R12X4G12X4B12X4A12X4_UNORM_4PACK16 == static_cast<GfxFormat>(VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16));
static_assert(GfxFormat::G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 == static_cast<GfxFormat>(VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16));
static_assert(GfxFormat::B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 == static_cast<GfxFormat>(VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16));
static_assert(GfxFormat::G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 == static_cast<GfxFormat>(VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16));
static_assert(GfxFormat::G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 == static_cast<GfxFormat>(VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16));
static_assert(GfxFormat::G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 == static_cast<GfxFormat>(VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16));
static_assert(GfxFormat::G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 == static_cast<GfxFormat>(VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16));
static_assert(GfxFormat::G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 == static_cast<GfxFormat>(VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16));
static_assert(GfxFormat::G16B16G16R16_422_UNORM == static_cast<GfxFormat>(VK_FORMAT_G16B16G16R16_422_UNORM));
static_assert(GfxFormat::B16G16R16G16_422_UNORM == static_cast<GfxFormat>(VK_FORMAT_B16G16R16G16_422_UNORM));
static_assert(GfxFormat::G16_B16_R16_3PLANE_420_UNORM == static_cast<GfxFormat>(VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM));
static_assert(GfxFormat::G16_B16R16_2PLANE_420_UNORM == static_cast<GfxFormat>(VK_FORMAT_G16_B16R16_2PLANE_420_UNORM));
static_assert(GfxFormat::G16_B16_R16_3PLANE_422_UNORM == static_cast<GfxFormat>(VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM));
static_assert(GfxFormat::G16_B16R16_2PLANE_422_UNORM == static_cast<GfxFormat>(VK_FORMAT_G16_B16R16_2PLANE_422_UNORM));
static_assert(GfxFormat::G16_B16_R16_3PLANE_444_UNORM == static_cast<GfxFormat>(VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM));
static_assert(GfxFormat::PVRTC1_2BPP_UNORM_BLOCK_IMG == static_cast<GfxFormat>(VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG));
static_assert(GfxFormat::PVRTC1_4BPP_UNORM_BLOCK_IMG == static_cast<GfxFormat>(VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG));
static_assert(GfxFormat::PVRTC2_2BPP_UNORM_BLOCK_IMG == static_cast<GfxFormat>(VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG));
static_assert(GfxFormat::PVRTC2_4BPP_UNORM_BLOCK_IMG == static_cast<GfxFormat>(VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG));
static_assert(GfxFormat::PVRTC1_2BPP_SRGB_BLOCK_IMG == static_cast<GfxFormat>(VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG));
static_assert(GfxFormat::PVRTC1_4BPP_SRGB_BLOCK_IMG == static_cast<GfxFormat>(VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG));
static_assert(GfxFormat::PVRTC2_2BPP_SRGB_BLOCK_IMG == static_cast<GfxFormat>(VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG));
static_assert(GfxFormat::PVRTC2_4BPP_SRGB_BLOCK_IMG == static_cast<GfxFormat>(VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG));
static_assert(GfxFormat::ASTC_4x4_SFLOAT_BLOCK_EXT == static_cast<GfxFormat>(VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT));
static_assert(GfxFormat::ASTC_5x4_SFLOAT_BLOCK_EXT == static_cast<GfxFormat>(VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT));
static_assert(GfxFormat::ASTC_5x5_SFLOAT_BLOCK_EXT == static_cast<GfxFormat>(VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT));
static_assert(GfxFormat::ASTC_6x5_SFLOAT_BLOCK_EXT == static_cast<GfxFormat>(VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT));
static_assert(GfxFormat::ASTC_6x6_SFLOAT_BLOCK_EXT == static_cast<GfxFormat>(VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT));
static_assert(GfxFormat::ASTC_8x5_SFLOAT_BLOCK_EXT == static_cast<GfxFormat>(VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT));
static_assert(GfxFormat::ASTC_8x6_SFLOAT_BLOCK_EXT == static_cast<GfxFormat>(VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT));
static_assert(GfxFormat::ASTC_8x8_SFLOAT_BLOCK_EXT == static_cast<GfxFormat>(VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT));
static_assert(GfxFormat::ASTC_10x5_SFLOAT_BLOCK_EXT == static_cast<GfxFormat>(VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT));
static_assert(GfxFormat::ASTC_10x6_SFLOAT_BLOCK_EXT == static_cast<GfxFormat>(VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT));
static_assert(GfxFormat::ASTC_10x8_SFLOAT_BLOCK_EXT == static_cast<GfxFormat>(VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT));
static_assert(GfxFormat::ASTC_10x10_SFLOAT_BLOCK_EXT == static_cast<GfxFormat>(VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT));
static_assert(GfxFormat::ASTC_12x10_SFLOAT_BLOCK_EXT == static_cast<GfxFormat>(VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT));
static_assert(GfxFormat::ASTC_12x12_SFLOAT_BLOCK_EXT == static_cast<GfxFormat>(VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT));
static_assert(GfxFormat::G8_B8R8_2PLANE_444_UNORM_EXT == static_cast<GfxFormat>(VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT));
static_assert(GfxFormat::G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT == static_cast<GfxFormat>(VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT));
static_assert(GfxFormat::G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT == static_cast<GfxFormat>(VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT));
static_assert(GfxFormat::G16_B16R16_2PLANE_444_UNORM_EXT == static_cast<GfxFormat>(VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT));
static_assert(GfxFormat::A4R4G4B4_UNORM_PACK16_EXT == static_cast<GfxFormat>(VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT));
static_assert(GfxFormat::A4B4G4R4_UNORM_PACK16_EXT == static_cast<GfxFormat>(VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT));

static_assert(GfxVertexInputRate::Vertex == static_cast<GfxVertexInputRate>(VK_VERTEX_INPUT_RATE_VERTEX));
static_assert(GfxVertexInputRate::Instance == static_cast<GfxVertexInputRate>(VK_VERTEX_INPUT_RATE_INSTANCE));

static_assert(GfxShaderStage::Vertex == static_cast<GfxShaderStage>(VK_SHADER_STAGE_VERTEX_BIT));
static_assert(GfxShaderStage::TessellationControl == static_cast<GfxShaderStage>(VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT));
static_assert(GfxShaderStage::TessellationEvaluation == static_cast<GfxShaderStage>(VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT));
static_assert(GfxShaderStage::Geometry == static_cast<GfxShaderStage>(VK_SHADER_STAGE_GEOMETRY_BIT));
static_assert(GfxShaderStage::Fragment == static_cast<GfxShaderStage>(VK_SHADER_STAGE_FRAGMENT_BIT));
static_assert(GfxShaderStage::Compute == static_cast<GfxShaderStage>(VK_SHADER_STAGE_COMPUTE_BIT));
static_assert(GfxShaderStage::AllGraphics == static_cast<GfxShaderStage>(VK_SHADER_STAGE_ALL_GRAPHICS));
static_assert(GfxShaderStage::All == static_cast<GfxShaderStage>(VK_SHADER_STAGE_ALL));
static_assert(GfxShaderStage::Raygen == static_cast<GfxShaderStage>(VK_SHADER_STAGE_RAYGEN_BIT_KHR));
static_assert(GfxShaderStage::AnyHit == static_cast<GfxShaderStage>(VK_SHADER_STAGE_ANY_HIT_BIT_KHR));
static_assert(GfxShaderStage::ClosestHit == static_cast<GfxShaderStage>(VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR));
static_assert(GfxShaderStage::Miss == static_cast<GfxShaderStage>(VK_SHADER_STAGE_MISS_BIT_KHR));
static_assert(GfxShaderStage::Intersection == static_cast<GfxShaderStage>(VK_SHADER_STAGE_INTERSECTION_BIT_KHR));
static_assert(GfxShaderStage::Callable == static_cast<GfxShaderStage>(VK_SHADER_STAGE_CALLABLE_BIT_KHR));
static_assert(GfxShaderStage::TaskNV == static_cast<GfxShaderStage>(VK_SHADER_STAGE_TASK_BIT_NV));
static_assert(GfxShaderStage::MeshNV == static_cast<GfxShaderStage>(VK_SHADER_STAGE_MESH_BIT_NV));

static_assert(GfxDescriptorType::Sampler == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_SAMPLER));
static_assert(GfxDescriptorType::SampledImage == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE));
static_assert(GfxDescriptorType::StorageImage == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_STORAGE_IMAGE));
static_assert(GfxDescriptorType::UniformTexelBuffer == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER));
static_assert(GfxDescriptorType::StorageTexelBuffer == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER));
static_assert(GfxDescriptorType::UniformBuffer == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER));
static_assert(GfxDescriptorType::StorageBuffer == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_STORAGE_BUFFER));
static_assert(GfxDescriptorType::UniformBufferDynamic == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC));
static_assert(GfxDescriptorType::StorageBufferDynamic == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC));
static_assert(GfxDescriptorType::InputAttachment == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT));
static_assert(GfxDescriptorType::InlineUniformBlockExt == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT));
static_assert(GfxDescriptorType::AccelerationStructureKhr == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR));
static_assert(GfxDescriptorType::AccelerationStructureNv == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV));
static_assert(GfxDescriptorType::MutableValve == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_MUTABLE_VALVE));

static_assert(GfxPolygonMode::Fill == static_cast<GfxPolygonMode>(VK_POLYGON_MODE_FILL));
static_assert(GfxPolygonMode::Line == static_cast<GfxPolygonMode>(VK_POLYGON_MODE_LINE));
static_assert(GfxPolygonMode::Point == static_cast<GfxPolygonMode>(VK_POLYGON_MODE_POINT));

static_assert(GfxCullModeFlags::None == static_cast<GfxCullModeFlags>(VK_CULL_MODE_NONE));
static_assert(GfxCullModeFlags::Front == static_cast<GfxCullModeFlags>(VK_CULL_MODE_FRONT_BIT));
static_assert(GfxCullModeFlags::Back == static_cast<GfxCullModeFlags>(VK_CULL_MODE_BACK_BIT));
static_assert(GfxCullModeFlags::FrontAndBack == static_cast<GfxCullModeFlags>(VK_CULL_MODE_FRONT_AND_BACK));

static_assert(GfxFrontFace::CounterClockwise == static_cast<GfxFrontFace>(VK_FRONT_FACE_COUNTER_CLOCKWISE));
static_assert(GfxFrontFace::Clockwise == static_cast<GfxFrontFace>(VK_FRONT_FACE_CLOCKWISE));

static_assert(GfxBlendFactor::Zero == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_ZERO));
static_assert(GfxBlendFactor::One == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_ONE));
static_assert(GfxBlendFactor::SrcColor == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_SRC_COLOR));
static_assert(GfxBlendFactor::OneMinusSrcColor == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR));
static_assert(GfxBlendFactor::DstColor == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_DST_COLOR));
static_assert(GfxBlendFactor::OneMinusDstColor == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR));
static_assert(GfxBlendFactor::SrcAlpha == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_SRC_ALPHA));
static_assert(GfxBlendFactor::OneMinusSrcAlpha == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA));
static_assert(GfxBlendFactor::DstAlpha == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_DST_ALPHA));
static_assert(GfxBlendFactor::OneMinusDstAlpha == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA));
static_assert(GfxBlendFactor::ConstantColor == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_CONSTANT_COLOR));
static_assert(GfxBlendFactor::OneMinusConstantColor == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR));
static_assert(GfxBlendFactor::ConstantAlpha == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_CONSTANT_ALPHA));
static_assert(GfxBlendFactor::OneMinusConstantAlpha == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA));
static_assert(GfxBlendFactor::SrcAlphaSaturate == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_SRC_ALPHA_SATURATE));
static_assert(GfxBlendFactor::Src1Color == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_SRC1_COLOR));
static_assert(GfxBlendFactor::OneMinusSrc1Color == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR));
static_assert(GfxBlendFactor::Src1Alpha == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_SRC1_ALPHA));
static_assert(GfxBlendFactor::OneMinusSrc1Alpha == static_cast<GfxBlendFactor>(VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA));

static_assert(GfxBlendOp::Add == static_cast<GfxBlendOp>(VK_BLEND_OP_ADD));
static_assert(GfxBlendOp::Subtract == static_cast<GfxBlendOp>(VK_BLEND_OP_SUBTRACT));
static_assert(GfxBlendOp::Reverse_subtract == static_cast<GfxBlendOp>(VK_BLEND_OP_REVERSE_SUBTRACT));
static_assert(GfxBlendOp::Min == static_cast<GfxBlendOp>(VK_BLEND_OP_MIN));
static_assert(GfxBlendOp::Max == static_cast<GfxBlendOp>(VK_BLEND_OP_MAX));
static_assert(GfxBlendOp::ZeroExt == static_cast<GfxBlendOp>(VK_BLEND_OP_ZERO_EXT));
static_assert(GfxBlendOp::SrcExt == static_cast<GfxBlendOp>(VK_BLEND_OP_SRC_EXT));
static_assert(GfxBlendOp::DstExt == static_cast<GfxBlendOp>(VK_BLEND_OP_DST_EXT));
static_assert(GfxBlendOp::SrcOverExt == static_cast<GfxBlendOp>(VK_BLEND_OP_SRC_OVER_EXT));
static_assert(GfxBlendOp::DstOverExt == static_cast<GfxBlendOp>(VK_BLEND_OP_DST_OVER_EXT));
static_assert(GfxBlendOp::SrcInExt == static_cast<GfxBlendOp>(VK_BLEND_OP_SRC_IN_EXT));
static_assert(GfxBlendOp::DstInExt == static_cast<GfxBlendOp>(VK_BLEND_OP_DST_IN_EXT));
static_assert(GfxBlendOp::SrcOutExt == static_cast<GfxBlendOp>(VK_BLEND_OP_SRC_OUT_EXT));
static_assert(GfxBlendOp::DstOutExt == static_cast<GfxBlendOp>(VK_BLEND_OP_DST_OUT_EXT));
static_assert(GfxBlendOp::SrcAtopExt == static_cast<GfxBlendOp>(VK_BLEND_OP_SRC_ATOP_EXT));
static_assert(GfxBlendOp::DstAtopExt == static_cast<GfxBlendOp>(VK_BLEND_OP_DST_ATOP_EXT));
static_assert(GfxBlendOp::XorExt == static_cast<GfxBlendOp>(VK_BLEND_OP_XOR_EXT));
static_assert(GfxBlendOp::MultiplyExt == static_cast<GfxBlendOp>(VK_BLEND_OP_MULTIPLY_EXT));
static_assert(GfxBlendOp::ScreenExt == static_cast<GfxBlendOp>(VK_BLEND_OP_SCREEN_EXT));
static_assert(GfxBlendOp::OverlayExt == static_cast<GfxBlendOp>(VK_BLEND_OP_OVERLAY_EXT));
static_assert(GfxBlendOp::DarkenExt == static_cast<GfxBlendOp>(VK_BLEND_OP_DARKEN_EXT));
static_assert(GfxBlendOp::LightenExt == static_cast<GfxBlendOp>(VK_BLEND_OP_LIGHTEN_EXT));
static_assert(GfxBlendOp::ColordodgeExt == static_cast<GfxBlendOp>(VK_BLEND_OP_COLORDODGE_EXT));
static_assert(GfxBlendOp::ColorburnExt == static_cast<GfxBlendOp>(VK_BLEND_OP_COLORBURN_EXT));
static_assert(GfxBlendOp::HardlightExt == static_cast<GfxBlendOp>(VK_BLEND_OP_HARDLIGHT_EXT));
static_assert(GfxBlendOp::SoftlightExt == static_cast<GfxBlendOp>(VK_BLEND_OP_SOFTLIGHT_EXT));
static_assert(GfxBlendOp::DifferenceExt == static_cast<GfxBlendOp>(VK_BLEND_OP_DIFFERENCE_EXT));
static_assert(GfxBlendOp::ExclusionExt == static_cast<GfxBlendOp>(VK_BLEND_OP_EXCLUSION_EXT));
static_assert(GfxBlendOp::InvertExt == static_cast<GfxBlendOp>(VK_BLEND_OP_INVERT_EXT));
static_assert(GfxBlendOp::InvertRgbExt == static_cast<GfxBlendOp>(VK_BLEND_OP_INVERT_RGB_EXT));
static_assert(GfxBlendOp::LineardodgeExt == static_cast<GfxBlendOp>(VK_BLEND_OP_LINEARDODGE_EXT));
static_assert(GfxBlendOp::LinearburnExt == static_cast<GfxBlendOp>(VK_BLEND_OP_LINEARBURN_EXT));
static_assert(GfxBlendOp::VividlightExt == static_cast<GfxBlendOp>(VK_BLEND_OP_VIVIDLIGHT_EXT));
static_assert(GfxBlendOp::LinearlightExt == static_cast<GfxBlendOp>(VK_BLEND_OP_LINEARLIGHT_EXT));
static_assert(GfxBlendOp::PinlightExt == static_cast<GfxBlendOp>(VK_BLEND_OP_PINLIGHT_EXT));
static_assert(GfxBlendOp::HardmixExt == static_cast<GfxBlendOp>(VK_BLEND_OP_HARDMIX_EXT));
static_assert(GfxBlendOp::HslHueExt == static_cast<GfxBlendOp>(VK_BLEND_OP_HSL_HUE_EXT));
static_assert(GfxBlendOp::HslSaturationExt == static_cast<GfxBlendOp>(VK_BLEND_OP_HSL_SATURATION_EXT));
static_assert(GfxBlendOp::HslColorExt == static_cast<GfxBlendOp>(VK_BLEND_OP_HSL_COLOR_EXT));
static_assert(GfxBlendOp::HslLuminosityExt == static_cast<GfxBlendOp>(VK_BLEND_OP_HSL_LUMINOSITY_EXT));
static_assert(GfxBlendOp::PlusExt == static_cast<GfxBlendOp>(VK_BLEND_OP_PLUS_EXT));
static_assert(GfxBlendOp::PlusClampedExt == static_cast<GfxBlendOp>(VK_BLEND_OP_PLUS_CLAMPED_EXT));
static_assert(GfxBlendOp::PlusClampedAlphaExt == static_cast<GfxBlendOp>(VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT));
static_assert(GfxBlendOp::PlusDarkerExt == static_cast<GfxBlendOp>(VK_BLEND_OP_PLUS_DARKER_EXT));
static_assert(GfxBlendOp::MinusExt == static_cast<GfxBlendOp>(VK_BLEND_OP_MINUS_EXT));
static_assert(GfxBlendOp::MinusClampedExt == static_cast<GfxBlendOp>(VK_BLEND_OP_MINUS_CLAMPED_EXT));
static_assert(GfxBlendOp::ContrastExt == static_cast<GfxBlendOp>(VK_BLEND_OP_CONTRAST_EXT));
static_assert(GfxBlendOp::InvertOvgExt == static_cast<GfxBlendOp>(VK_BLEND_OP_INVERT_OVG_EXT));
static_assert(GfxBlendOp::RedExt == static_cast<GfxBlendOp>(VK_BLEND_OP_RED_EXT));
static_assert(GfxBlendOp::GreenExt == static_cast<GfxBlendOp>(VK_BLEND_OP_GREEN_EXT));
static_assert(GfxBlendOp::BlueExt == static_cast<GfxBlendOp>(VK_BLEND_OP_BLUE_EXT));

static_assert(GfxCompareOp::Never == static_cast<GfxCompareOp>(VK_COMPARE_OP_NEVER));
static_assert(GfxCompareOp::Less == static_cast<GfxCompareOp>(VK_COMPARE_OP_LESS));
static_assert(GfxCompareOp::Equal == static_cast<GfxCompareOp>(VK_COMPARE_OP_EQUAL));
static_assert(GfxCompareOp::LessOrEqual == static_cast<GfxCompareOp>(VK_COMPARE_OP_LESS_OR_EQUAL));
static_assert(GfxCompareOp::Greater == static_cast<GfxCompareOp>(VK_COMPARE_OP_GREATER));
static_assert(GfxCompareOp::NotEqual == static_cast<GfxCompareOp>(VK_COMPARE_OP_NOT_EQUAL));
static_assert(GfxCompareOp::GreaterOrEqual == static_cast<GfxCompareOp>(VK_COMPARE_OP_GREATER_OR_EQUAL));
static_assert(GfxCompareOp::Always == static_cast<GfxCompareOp>(VK_COMPARE_OP_ALWAYS));

static_assert(GfxColorComponentFlags::R == static_cast<GfxColorComponentFlags>(VK_COLOR_COMPONENT_R_BIT));
static_assert(GfxColorComponentFlags::G == static_cast<GfxColorComponentFlags>(VK_COLOR_COMPONENT_G_BIT));
static_assert(GfxColorComponentFlags::B == static_cast<GfxColorComponentFlags>(VK_COLOR_COMPONENT_B_BIT));
static_assert(GfxColorComponentFlags::A == static_cast<GfxColorComponentFlags>(VK_COLOR_COMPONENT_A_BIT));

static_assert(GfxLogicOp::Clear == static_cast<GfxLogicOp>(VK_LOGIC_OP_CLEAR));
static_assert(GfxLogicOp::And == static_cast<GfxLogicOp>(VK_LOGIC_OP_AND));
static_assert(GfxLogicOp::AndReverse == static_cast<GfxLogicOp>(VK_LOGIC_OP_AND_REVERSE));
static_assert(GfxLogicOp::Copy == static_cast<GfxLogicOp>(VK_LOGIC_OP_COPY));
static_assert(GfxLogicOp::AndInverted == static_cast<GfxLogicOp>(VK_LOGIC_OP_AND_INVERTED));
static_assert(GfxLogicOp::NoOp == static_cast<GfxLogicOp>(VK_LOGIC_OP_NO_OP));
static_assert(GfxLogicOp::Xor == static_cast<GfxLogicOp>(VK_LOGIC_OP_XOR));
static_assert(GfxLogicOp::Or == static_cast<GfxLogicOp>(VK_LOGIC_OP_OR));
static_assert(GfxLogicOp::Nor == static_cast<GfxLogicOp>(VK_LOGIC_OP_NOR));
static_assert(GfxLogicOp::Equivalent == static_cast<GfxLogicOp>(VK_LOGIC_OP_EQUIVALENT));
static_assert(GfxLogicOp::Invert  == static_cast<GfxLogicOp>(VK_LOGIC_OP_INVERT));
static_assert(GfxLogicOp::OrReverse  == static_cast<GfxLogicOp>(VK_LOGIC_OP_OR_REVERSE));
static_assert(GfxLogicOp::CopyInverted  == static_cast<GfxLogicOp>(VK_LOGIC_OP_COPY_INVERTED));
static_assert(GfxLogicOp::OrInverted  == static_cast<GfxLogicOp>(VK_LOGIC_OP_OR_INVERTED));
static_assert(GfxLogicOp::Nand  == static_cast<GfxLogicOp>(VK_LOGIC_OP_NAND));
static_assert(GfxLogicOp::Set  == static_cast<GfxLogicOp>(VK_LOGIC_OP_SET));

static_assert(GfxStencilOp::Keep == static_cast<GfxStencilOp>(VK_STENCIL_OP_KEEP));
static_assert(GfxStencilOp::Zero == static_cast<GfxStencilOp>(VK_STENCIL_OP_ZERO));
static_assert(GfxStencilOp::Replace == static_cast<GfxStencilOp>(VK_STENCIL_OP_REPLACE));
static_assert(GfxStencilOp::IncrementAndClamp == static_cast<GfxStencilOp>(VK_STENCIL_OP_INCREMENT_AND_CLAMP));
static_assert(GfxStencilOp::DecrementAndClamp == static_cast<GfxStencilOp>(VK_STENCIL_OP_DECREMENT_AND_CLAMP));
static_assert(GfxStencilOp::Invert == static_cast<GfxStencilOp>(VK_STENCIL_OP_INVERT));
static_assert(GfxStencilOp::IncrementAndWrap == static_cast<GfxStencilOp>(VK_STENCIL_OP_INCREMENT_AND_WRAP));
static_assert(GfxStencilOp::DecrementAndWrap == static_cast<GfxStencilOp>(VK_STENCIL_OP_DECREMENT_AND_WRAP));

static_assert(GfxPrimitiveTopology::PointList == static_cast<GfxPrimitiveTopology>(VK_PRIMITIVE_TOPOLOGY_POINT_LIST));
static_assert(GfxPrimitiveTopology::LineList == static_cast<GfxPrimitiveTopology>(VK_PRIMITIVE_TOPOLOGY_LINE_LIST));
static_assert(GfxPrimitiveTopology::LineStrip == static_cast<GfxPrimitiveTopology>(VK_PRIMITIVE_TOPOLOGY_LINE_STRIP));
static_assert(GfxPrimitiveTopology::TriangleList == static_cast<GfxPrimitiveTopology>(VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST));
static_assert(GfxPrimitiveTopology::TriangleStrip == static_cast<GfxPrimitiveTopology>(VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP));
static_assert(GfxPrimitiveTopology::TriangleFan == static_cast<GfxPrimitiveTopology>(VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN));
static_assert(GfxPrimitiveTopology::LineListWithAdjacency == static_cast<GfxPrimitiveTopology>(VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY));
static_assert(GfxPrimitiveTopology::LineStripWithAdjacency == static_cast<GfxPrimitiveTopology>(VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY));
static_assert(GfxPrimitiveTopology::TriangleListWithAdjacency == static_cast<GfxPrimitiveTopology>(VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY));
static_assert(GfxPrimitiveTopology::TriangleStripWithAdjacency == static_cast<GfxPrimitiveTopology>(VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY));
static_assert(GfxPrimitiveTopology::PatchList == static_cast<GfxPrimitiveTopology>(VK_PRIMITIVE_TOPOLOGY_PATCH_LIST));

static_assert(GfxDescriptorType::Sampler == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_SAMPLER));
static_assert(GfxDescriptorType::CombinedImageSampler == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER));
static_assert(GfxDescriptorType::SampledImage == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE));
static_assert(GfxDescriptorType::StorageImage == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_STORAGE_IMAGE));
static_assert(GfxDescriptorType::UniformTexelBuffer == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER));
static_assert(GfxDescriptorType::StorageTexelBuffer == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER));
static_assert(GfxDescriptorType::UniformBuffer == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER));
static_assert(GfxDescriptorType::StorageBuffer == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_STORAGE_BUFFER));
static_assert(GfxDescriptorType::UniformBufferDynamic == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC));
static_assert(GfxDescriptorType::StorageBufferDynamic == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC));
static_assert(GfxDescriptorType::InputAttachment == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT));
static_assert(GfxDescriptorType::InlineUniformBlockExt == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT));
static_assert(GfxDescriptorType::AccelerationStructureKhr == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR));
static_assert(GfxDescriptorType::AccelerationStructureNv == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV));
static_assert(GfxDescriptorType::MutableValve == static_cast<GfxDescriptorType>(VK_DESCRIPTOR_TYPE_MUTABLE_VALVE));



